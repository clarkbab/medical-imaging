import numpy as np
import pandas as pd
import torch
from typing import *

Axis = Literal[0, 1, 2]
AxisName = Literal['sagittal', 'coronal', 'axial']
Pixel = Tuple[int, int]               # Required by 'Box'.
Voxel = Tuple[int, int, int]          # Required by 'Box'.
Point2D = Tuple[float, float]         # Required by 'Box'.
Point3D = Tuple[float, float, float]  # Required by 'Box'.
PixelBox = Tuple[Pixel, Pixel]
VoxelBox = Tuple[Voxel, Voxel]
Point2DBox = Tuple[Point2D, Point2D]
Point3DBox = Tuple[Point3D, Point3D]
Points2D = np.ndarray
Points3D = np.ndarray
Channel = int
Channels = Union[Channel, Sequence[Channel], Literal['all']]
Colour = Union[str, Tuple[float, float, float]]
DicomModality = Literal['ct', 'mr', 'rtdose', 'rtplan', 'rtstruct']
DicomSOPInstanceUID = str
Image = Union[np.ndarray, torch.Tensor]      # An image with dimensions (2, 3, 4, or 5).
Image2D = Union[np.ndarray, torch.Tensor]
Image3D = Union[np.ndarray, torch.Tensor]
CtImage = Image
DoseImage = Image
VectorImage = Image
Extrema = Literal[0, 1]
GroupID = Union[int, float, str]
GroupIDs = Union[GroupID, Sequence[GroupID]]
ImageFOV2D = Tuple[float, float]
ImageFOV3D = Tuple[float, float, float]
Images = Union[Image, List[Image]]
Size2D = Tuple[int, int]
Size3D = Tuple[int, int, int]
ImageSizeMM2D = Tuple[float, float]
ImageSizeMM3D = Tuple[float, float, float]
Spacing2D = Tuple[float, float]
Spacing3D = Tuple[float, float, float]
LabelImage = Image
Landmark = int
Landmarks = Union[Landmark, Sequence[Landmark], Literal['all']]
LandmarkData = pd.DataFrame
ModelCheckpoint = Union[str, Literal['best', 'last']]
ModelName = Tuple[str, str]
MrImage = Image
NiftiModality = Literal['ct', 'dose', 'mr', 'regions']
NrrdModality = NiftiModality
Number = Union[int, float]
PatientID = str
PatientIDs = Union[PatientID, Sequence[PatientID], Literal['all']]
Region = str
Regions = Union[Region, Sequence[Region], Literal['all']]
RegionLabel = LabelImage
RegionImage = Dict[Region, RegionLabel]
SampleID = int
SampleIDs = Union[SampleID, Sequence[SampleID], Literal['all']]
SeriesID = str
Split = Literal['train', 'validation', 'test']
Splits = Union[Split, Sequence[Split], Literal['all']]
SpartanPartition = Literal['feit-gpu-a100', 'gpu-a100', 'gpu-a100-short', 'gpu-h100', 'sapphire']
SpartanPartitions = Union[SpartanPartition, Sequence[SpartanPartition]]
StudyID = str
StudyIDs = Union[StudyID, Sequence[StudyID], Literal['all']]
TrainingInterval = str
